{"version":3,"sources":["../src/index.js"],"names":["require","types","MODULE","COMPONENT","console","log","green","textSync","create","args","version","usage","option","parse","process","argv","parseValues","moduleName","type","path","includes","bold","red","exit","cyan","catch","error","message","then","values","handleValues"],"mappings":"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","file":"index.js","sourcesContent":["\n// @flow\nrequire(\"babel-polyfill\");\n\nimport program from 'commander';\nimport co from 'co';\nimport prompt from 'co-prompt';\nimport chalk from 'chalk';\nimport figlet from 'figlet';\n\n// local libs\nimport createModule from './module/createModule';\nimport createComponent from './component/createComponent';\nimport constants from './constants';\n\nconst types = [constants.types.MODULE, constants.types.COMPONENT];\nconsole.log(\n\tchalk.green(\n\t\tfiglet.textSync('ReactJS CLI')\n\t)\n);\n\nconst create = (args) => {\n\tconsole.log(args);\n};\n\nprogram\n\t.version('0.0.1')\n\t.usage('<types>')\n\t.option('-t, --type [type]', 'Type of generated structure [module|component]')\n\t.option('-n, --moduleName [moduleName]', 'Name of generated structure [module|component]')\n\t.option('-p, --path [path]', 'Path for the generated structure [module|component]')\n\t.parse(process.argv);\n\n\nconst parseValues = co(function *() {\n\tlet moduleName: string = program.moduleName;\n\tlet type: string = program.type;\n\tlet path: string = program.path;\n\tif (!type) {\n\t\ttype = yield prompt(`Type ${constants.types.MODULE}|${constants.types.COMPONENT} [module]: `);\n\t}\n\tif (!type) {\n\t\ttype = 'module';\n\t}\n\tif (!types.includes(type)) {\n\t\tconsole.log(chalk.bold.red(`Type: ${type} is not supported`));\n\t\tprocess.exit(0);\n\t}\n\tif (!moduleName) {\n\t\tmoduleName = yield prompt(`Enter the name of ${type} *: `);\n\t\tif (!moduleName) {\n\t\t\tconsole.log(chalk.bold.red(`The name is required`));\n\t\t\tprocess.exit(0);\n\t\t}\n\t}\n\tif (!path) {\n\t\tpath = yield prompt(`Optional path, we recommend to leave blank(will default to /src/[modules|components]):`);\n\t}\n\tconsole.log(chalk.bold.cyan(`A new ${type} is going to be created`));\n\n\treturn {\n\t\ttype,\n\t\tmoduleName,\n\t\tpath\n\t};\n}).catch((error) => {\n\tconsole.log(chalk.bold.red(error.message));\n\tprocess.exit(0);\n});\n\nparseValues.then((values) => handleValues(values))\n\t.catch((error) => {\n\t\tconsole.log(chalk.bold.red(error.message));\n\t\tprocess.exit(0);\n\t});\n\nconst handleValues = ({ type, path, moduleName }) => {\n\tswitch (type) {\n\t\tcase constants.types.MODULE:\n\t\t\tcreateModule(moduleName, path);\n\t\t\tbreak;\n\t\tcase constants.types.COMPONENT:\n\t\t\tcreateComponent(moduleName, path);\n\t\t\tbreak;\n\t\tdefault:\n\t}\n\tconsole.log(chalk.bold.green('Get a cofee and enjoy the time you saved :)!'));\n\tprocess.exit(0);\n};\n"]}
{"version":3,"sources":["../src/index.js"],"names":["require","types","MODULE","COMPONENT","ATOM","MOLECULE","ORGANISM","DUMB","ROUTE","PATH","console","log","green","textSync","pjson","version","usage","option","parse","process","argv","parseValues","config","counter","forEach","type","length","bold","red","exit","catch","error","message","then","values","handleValues","component","path","module","atom","molecule","organism","dumb","route","undefined","exec","code","echo"],"mappings":"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","file":"index.js","sourcesContent":["\n// @flow\nrequire(\"babel-polyfill\");\n\nimport program from 'commander';\nimport co from 'co';\nimport prompt from 'co-prompt';\nimport chalk from 'chalk';\nimport figlet from 'figlet';\nimport shell from 'shelljs';\n\n// local libs\nimport createModule from './module/createModule';\nimport createComponent from './component/createComponent';\nimport createRoute from './route/createRoute';\nimport constants from './constants';\n\nconst types = [\n\tconstants.types.MODULE,\n\tconstants.types.COMPONENT,\n\tconstants.types.ATOM,\n\tconstants.types.MOLECULE,\n\tconstants.types.ORGANISM,\n\tconstants.types.DUMB,\n\tconstants.types.ROUTE,\n\tconstants.types.PATH,\n];\nconsole.log(\n\tchalk.green(\n\t\tfiglet.textSync('ReactJS CLI')\n\t)\n);\n\nconst pjson = require('../package.json');\n\nprogram\n\t.version(pjson.version)\n\t.usage('with or without arguments :)')\n\t.option('-l, --module    [module]', 'name of your Module')\n\t.option('-c, --component [component]', 'name of your Component')\n\t.option('-a, --atom      [atom]', 'name of your Atom')\n\t.option('-m, --molecule  [molecule]', 'name of your Molecule')\n\t.option('-o, --organism  [organism]', 'name of your Organism')\n\t.option('-d, --dumb  [organism]', 'name of your dumb component')\n\t.option('-r, --route     [route]', 'url of your route')\n\t.option('-p, --path      [path]', 'path for the generated structure [module|component]')\n\t.parse(process.argv);\n\n\nconst parseValues = co(function *() {\n\tconst config = {};\n\tlet counter = 0;\n\n\ttypes.forEach((type) => {\n\t\tconfig[type] = program[type];\n\t\tif (!program[type]) {\n\t\t\tcounter++;\n\t\t}\n\t});\n\n\tif (counter === types.length || (counter === types.length - 1 && config[constants.types.PATH])) {\n\t\t// if no arguments or only path provided run prompts\n\t\tconfig[constants.types.MODULE] = yield prompt(`Enter the name of ${constants.types.MODULE} *: `);\n\t\tif (!config[constants.types.MODULE] || '' === config[constants.types.MODULE]) {\n\t\t\tconsole.log(chalk.bold.red(`The name is required`));\n\t\t\tprocess.exit(0);\n\t\t}\n\t\tif (!config[constants.types.PATH]) {\n\t\t\tconfig[constants.types.PATH] = yield prompt(`Optional path, we recommend to leave blank(will default to /src/[modules|components]):`);\n\t\t}\n\t}\n\treturn config;\n}).catch((error) => {\n\tconsole.log(chalk.bold.red(error.message));\n\tprocess.exit(0);\n});\n\nparseValues.then((values) => handleValues(values))\n\t.catch((error) => {\n\t\tconsole.log(chalk.bold.red(error.message));\n\t\tprocess.exit(0);\n\t});\n\nconst handleValues = ({ component, path, module, atom, molecule, organism, dumb, route }) => {\n\n\tmodule && createModule(module, path);\n\tcomponent && createComponent(component, path);\n\tdumb && createComponent(dumb, path, undefined, true);\n\tmolecule && createComponent(molecule, path, 'molecules');\n\tatom && createComponent(atom, path, 'atoms');\n\torganism && createComponent(organism, path, 'organisms');\n\troute && createRoute(route);\n\n\tif (shell.exec('npm run test').code !== 0) {\n\t\tshell.echo('Can not run tests. Please run tests manually!');\n\t}\n\n\tconsole.log(chalk.bold.green('Get a cofee and enjoy the time you saved :)!'));\n\tprocess.exit(0);\n};\n"]}
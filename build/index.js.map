{"version":3,"sources":["../src/index.js"],"names":["types","MODULE","COMPONENT","ATOM","MOLECULE","ORGANISM","DUMB","ROUTE","PATH","TEST_REDUCER","console","log","green","textSync","pjson","require","version","usage","option","parse","process","argv","parseValues","config","counter","forEach","type","length","bold","red","exit","cyan","catch","error","message","then","values","handleValues","component","path","module","atom","molecule","organism","dumb","route","rtest","args","undefined","routeType","routePath","reset","exec","code","echo"],"mappings":"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","file":"index.js","sourcesContent":["\n// @flow\nimport \"babel-polyfill\";\n\nimport program from 'commander';\nimport co from 'co';\nimport prompt from 'co-prompt';\nimport chalk from 'chalk';\nimport figlet from 'figlet';\nimport shell from 'shelljs';\n\n// local libs\nimport createModule from './module/createModule';\nimport createComponent from './component/createComponent';\nimport createRoute from './route/createRoute';\nimport createReducerTest from './test/createReducerTest';\nimport constants from './constants';\n\nconst types = [\n\tconstants.types.MODULE,\n\tconstants.types.COMPONENT,\n\tconstants.types.ATOM,\n\tconstants.types.MOLECULE,\n\tconstants.types.ORGANISM,\n\tconstants.types.DUMB,\n\tconstants.types.ROUTE,\n\tconstants.types.PATH,\n\tconstants.types.TEST_REDUCER,\n];\nconsole.log(\n\tchalk.green(\n\t\tfiglet.textSync('ReactJS CLI')\n\t)\n);\n\nconst pjson = require('../package.json');\n\nprogram\n\t.version(pjson.version)\n\t.usage('with or without arguments :)')\n\t.option('-l, --module    [module]', 'name of your Module')\n\t.option('-c, --component [component]', 'name of your Component')\n\t.option('-a, --atom      [atom]', 'name of your Atom')\n\t.option('-m, --molecule  [molecule]', 'name of your Molecule')\n\t.option('-o, --organism  [organism]', 'name of your Organism')\n\t.option('-d, --dumb      [organism]', 'name of your dumb component')\n\t.option('-r, --route     [route name]', 'url of your route')\n\t.option('-p, --path      [path]', 'path for the generated structure [module|component]')\n\t.option('-t, --rtest     [rtest]', 'name of reducer for test file e.g. User -> UserReducerTest')\n\t.parse(process.argv);\n\n\nconst parseValues = co(function *() {\n\tconst config = {};\n\tlet counter = 0;\n\n\ttypes.forEach((type) => {\n\t\tconfig[type] = program[type];\n\t\tif (!program[type]) {\n\t\t\tcounter++;\n\t\t}\n\t});\n\n\tif (counter === types.length || (counter === types.length - 1 && config[constants.types.PATH])) {\n\t\t// if no arguments or only path provided run prompts\n\t\tconfig[constants.types.MODULE] = yield prompt(`Enter the name of ${constants.types.MODULE} *: `);\n\t\tif (!config[constants.types.MODULE] || '' === config[constants.types.MODULE]) {\n\t\t\tconsole.log(chalk.bold.red(`The name is required`));\n\t\t\tprocess.exit(0);\n\t\t}\n\t\tif (!config[constants.types.PATH]) {\n\t\t\tconfig[constants.types.PATH] = yield prompt(chalk.bold.cyan(`Optional path, we recommend to leave blank(will default to /src/[modules|components]):`));\n\t\t}\n\t}\n\n\tif (config[constants.types.ROUTE] && '' !== config[constants.types.ROUTE]) {\n\t\tconfig['routeType'] = yield prompt(chalk.bold.cyan(`Do you want to add a public or secure route? Options [p|s], defaults to p - public route:`));\n\t\tconfig['routePath'] = yield prompt(chalk.bold.cyan(`Enter the URL path of your route, e.g. /contact (firewall path will be automatically prepended):`));\n\t}\n\n\treturn config;\n}).catch((error) => {\n\tconsole.log(chalk.bold.red(error.message));\n\tprocess.exit(0);\n});\n\nparseValues.then((values) => handleValues(values))\n\t.catch((error) => {\n\t\tconsole.log(chalk.bold.red(error.message));\n\t\tprocess.exit(0);\n\t});\n\nconst handleValues = ({ component, path, module, atom, molecule, organism, dumb, route, rtest, ...args }) => {\n\n\tmodule && createModule(module, path);\n\tcomponent && createComponent(component, path);\n\tdumb && createComponent(dumb, path, undefined, true);\n\tmolecule && createComponent(molecule, path, 'molecules');\n\tatom && createComponent(atom, path, 'atoms');\n\torganism && createComponent(organism, path, 'organisms');\n\trtest && createReducerTest(rtest, path);\n\tif (route) {\n\t\tconst { routeType, routePath } = args;\n\t\tcreateRoute(route, routeType, routePath);\n\t}\n\tchalk.reset();\n\tif (shell.exec('npm run test:js').code !== 0) {\n\t\tshell.echo('Can not run tests. Please run tests manually!');\n\t}\n\n\tconsole.log(chalk.bold.green('Get a cofee and enjoy the time you saved :)!'));\n\tprocess.exit(0);\n};\n"]}
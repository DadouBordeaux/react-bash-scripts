{"version":3,"sources":["../../src/templates/reducerTest.js"],"names":["getTemplate","name","nameLower","toLowerCase","nameUpper","toUpperCase"],"mappings":";;;;;AAAA,IAAMA,cAAc,SAAdA,WAAc,CAACC,IAAD,EAAU;AAC7B,KAAMC,YAAYD,KAAKE,WAAL,EAAlB;AACA,KAAMC,YAAYH,KAAKI,WAAL,EAAlB;AACA,8BACQH,SADR,2CACuDD,IADvD,4BAEUC,SAFV,wCAEsDD,IAFtD,iCAIWC,SAJX,4EAMUA,SANV,kJASUA,SATV,mCASiDA,SATjD,gBASqEE,SATrE,6HAYUF,SAZV,mCAYiDA,SAZjD,gBAYqEE,SAZrE,oIAeUF,SAfV,4CAgBWA,SAhBX,gBAgB+BE,SAhB/B,6IAoBUF,SApBV,2CAqBUA,SArBV,gBAqB8BE,SArB9B,wDAsB0BH,IAtB1B,8HA0BUC,SA1BV,2CA2BUA,SA3BV,gBA2B8BE,SA3B9B,+CA4B0BH,IA5B1B,8LAkCIA,IAlCJ,qCAmCqBA,IAnCrB,uHA2CUC,SA3CV,6CA4CUA,SA5CV,gBA4C8BE,SA5C9B,0CA6CqBH,IA7CrB,iBA8CMA,IA9CN,0BA8C+BA,IA9C/B;AAmDA,CAtDD;;kBAwDeD,W","file":"reducerTest.js","sourcesContent":["const getTemplate = (name) => {\n\tconst nameLower = name.toLowerCase();\n\tconst nameUpper = name.toUpperCase();\n\treturn (`// @flow\nimport ${nameLower}Reducer, { initialState } from '../${name}Reducer';\nimport { ${nameLower}Actions } from '../../constants/${name}Constants';\n\ndescribe('${nameLower}Reducer', () => {\n\tit('return initial state', () => {\n\t\texpect(${nameLower}Reducer(undefined, { type: 'unknown' })).toEqual(initialState);\n\t});\n\tit('set error to true if error dispatched', () => {\n\t\texpect(${nameLower}Reducer(undefined, { type: ${nameLower}Actions.${nameUpper}_ERROR }).error === true).toBeTruthy();\n\t});\n\tit('set loading to false if error dispatched', () => {\n\t\texpect(${nameLower}Reducer(undefined, { type: ${nameLower}Actions.${nameUpper}_ERROR }).isFetching === false).toBeTruthy();\n\t});\n\tit('set loading to true if request dispatched', () => {\n\t\texpect(${nameLower}Reducer(undefined, {\n\t\t\t\ttype: ${nameLower}Actions.${nameUpper}_REQUEST,\n\t\t\t}).isFetching === true).toBeTruthy();\n\t});\n\tit('set loaded to true if loadMore dispatched', () => {\n\t\texpect(${nameLower}Reducer(undefined, { \n\t\t\ttype: ${nameLower}Actions.${nameUpper}_SUCCESS_LOADMORE,\n\t\t\tpayload: initialState.${name},\n\t\t}).loaded === true).toBeTruthy();\n\t});\n\tit('set loaded to true if success dispatched', () => {\n\t\texpect(${nameLower}Reducer(undefined, { \n\t\t\ttype: ${nameLower}Actions.${nameUpper}_SUCCESS,\n\t\t\tpayload: initialState.${name},\n\t\t }).loaded === true).toBeTruthy();\n\t});\n\tit('results should match payload if success dispatched with payload', () => {\n\t\tlet payload = {\n\t\t\t...initialState,\n\t\t\t${name}: {\n\t\t\t\t...initialState.${name},\n\t\t\t\tdata: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttest: 'test'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t};\n\t\texpect(${nameLower}Reducer(initialState, {\n\t\t\ttype: ${nameLower}Actions.${nameUpper}_SUCCESS,\n\t\t\tpayload: payload.${name}\n\t\t}).${name}).toEqual(payload.${name});\n\t});\n});\n`\n\t);\n};\n\nexport default getTemplate;\n"]}